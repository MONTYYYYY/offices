/* eslint-disable no-param-reassign */
import { createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState } from '../redux/store';

export const OFFICE_COLORS: string[] = [
  '#FFBE0B',
  '#FF9B71',
  '#FB5607',
  '#97512C',
  '#FF006E',
  '#A9F0D1',
  '#00B402',
  '#489DDA',
  '#0072E8',
  '#8338EC',
];

export interface IOfficeInformation {
  id : string;
  companyName: string;
  staffIDs : string[];
  email : string;
  phone : string;
  location :string;
  officeCapacity: number;
  color: string;
}

export interface IOfficesState {
    offices: IOfficeInformation[];
    filteredOffices: IOfficeInformation[];
    query: string;
}

const initialState:IOfficesState = {
  offices: [
    {
      id: 'A1',
      companyName: 'Apple',
      staffIDs: ['S1'],
      email: 'info@apple.com',
      phone: '080 044 4426',
      location: 'Cupertino, California, United States',
      officeCapacity: 25,
      color: '#FFBE0B',
    },
    {
      id: 'A2',
      companyName: 'Tesla',
      staffIDs: ['S2', 'S3'],
      email: 'info@tesla.com',
      phone: '+123323232',
      location: '10, California, America',
      officeCapacity: 5,
      color: '#FF9B71',
    },
    {
      id: 'A3',
      companyName: 'Amazon',
      staffIDs: ['S2', 'S3'],
      email: 'info@aws.com',
      phone: '+123323232',
      location: '10, NewYork, America',
      officeCapacity: 5,
      color: '#FB5607',
    },
    {
      id: 'A4',
      companyName: 'Google',
      staffIDs: ['S1', 'S2', 'S3'],
      email: 'info@google.com',
      phone: '+123323232',
      location: '10, New York, America',
      officeCapacity: 5,
      color: '#97512C',
    },
  ],
  filteredOffices: [],
  query: '',
};

interface IRemoveStaffFromOfficePayload {
  officeId : string;
  staffId : string;
}
interface IAddStaffToOfficePayload {
  officeId : string;
  staffId : string;
}

interface IUpdateOfficePayload {
  officeId : string;
  officeItem : IOfficeInformation;
}
export const officesSlice = createSlice({
  name: 'offices',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    addOffice: (state, { payload }: PayloadAction<IOfficeInformation>) => {
      state.offices = state.offices.concat([payload]);
    },
    addStaffToOffice: (state, { payload }: PayloadAction<IAddStaffToOfficePayload>) => {
      const index = state.offices.findIndex((selectedOffice) => selectedOffice.id === payload.officeId);
      const newSelectableOffices = [...state.offices];
      const newRecord = { staffIDs: state.offices[index].staffIDs.concat([payload.staffId]) };
      newSelectableOffices[index] = { ...state.offices[index], ...newRecord };
      state.offices = newSelectableOffices;
    },
    removeStaffFromOffice: (state, { payload }: PayloadAction<IRemoveStaffFromOfficePayload>) => {
      const index = state.offices.findIndex((selectedOffice) => selectedOffice.id === payload.officeId);
      const newSelectableOffices = [...state.offices];
      const newRecord = { staffIDs: state.offices[index].staffIDs.filter((staffId) => staffId !== payload.staffId) };
      newSelectableOffices[index] = { ...state.offices[index], ...newRecord };
      state.offices = newSelectableOffices;
    },
    removeOffice: (state, { payload }: PayloadAction<string>) => {
      state.offices = state.offices.filter((office) => office.id !== payload);
    },
    updateOffice: (state, { payload }: PayloadAction<IUpdateOfficePayload>) => {
      const index = state.offices.findIndex((selectedOffice) => selectedOffice.id === payload.officeId);
      const newOffices = [...state.offices];
      newOffices[index] = payload.officeItem;
      state.offices = [...newOffices];
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
});

export const {
  addStaffToOffice,
  removeStaffFromOffice,
  addOffice,
  updateOffice,
  removeOffice,
} = officesSlice.actions;

export const selectOffices = (state: RootState) => state.offices;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.

export default officesSlice.reducer;
