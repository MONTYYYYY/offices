/* eslint-disable no-param-reassign */
import { createSlice, PayloadAction } from '@reduxjs/toolkit';
import Images from '../assets';
import { RootState } from '../redux/store';

interface IAvatar {
  [key :string]: string;
}
export const Avatars: IAvatar = {
  balloon: Images.Avatars.AvatarBalloons,
  yellow_moon: Images.Avatars.AvatarYellowMoon,
  saturn: Images.Avatars.AvatarSaturn,
  space_ship: Images.Avatars.AvatarSpaceShip,
  super_man: Images.Avatars.AvatarSuperman,
  love: Images.Avatars.AvatarLove,
};

export interface IStaffInformation {
  id : string;
  firstName: string;
  lastName: string;
  avatar : string;
}

export interface IStaffState {
    staff: IStaffInformation[];
    filteredStaff: IStaffInformation[];
    query: string;
}

const initialState:IStaffState = {
  staff: [
    {
      id: 'S1',
      firstName: 'John',
      lastName: 'Dimber',
      avatar: 'balloon',
    },
    {
      id: 'S2',
      firstName: 'Sam',
      lastName: 'Doaiwo',
      avatar: 'saturn',
    },
    {
      id: 'S3',
      firstName: 'Jackie',
      lastName: 'Chan',
      avatar: 'super_man',
    },
    {
      id: 'S4',
      firstName: 'Ben',
      lastName: 'Doe',
      avatar: 'space_ship',
    },
  ],
  filteredStaff: [],
  query: '',
};

interface IEditStaffPayload {
  staffId : string;
  staffItem : IStaffInformation;
}
export const staffSlice = createSlice({
  name: 'staff',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    setFilteredStaff: (state, newState) => {
      state.filteredStaff = [].concat(...newState.payload);
    },
    setQuery: (state, newState) => {
      state.query = newState.payload;
    },
    editStaff: (state, { payload }: PayloadAction<IEditStaffPayload>) => {
      const index = state.staff.findIndex((selectedStaff) => selectedStaff.id === payload.staffId);
      const newStaff = [...state.staff];
      newStaff[index] = payload.staffItem;
      state.staff = [...newStaff];
    },
    addStaff: (state, { payload }: PayloadAction<IStaffInformation>) => {
      state.staff = state.staff.concat([payload]);
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
});

export const {
  setFilteredStaff, setQuery, editStaff, addStaff,
} = staffSlice.actions;

export const selectStaff = (state: RootState) => state.staff;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.

export default staffSlice.reducer;
