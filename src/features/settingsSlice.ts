/* eslint-disable no-param-reassign */
/* eslint-disable no-unused-vars */
import { createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState } from '../redux/store';

// Keys and values should be unique (important)
// Modals and/or Drawers
export enum DisplayedModalOptions {
  STAFF = 'STAFF',
  none = '',
}

export type ModalTypes = 'view' |'edit' | 'add' | 'delete';

export enum ModalTypeOptions {
  VIEW = 'view',
  EDIT = 'edit',
  ADD = 'add',
  DELETE = 'delete',
}
export interface IModalType {
  entityId? : number | string;
}
interface IDisplayModal {
  type?: ModalTypes;
  option: DisplayedModalOptions;
  entityProfileId?: string | number | null;
}
export interface ISettingsState {
  displayedModal : IDisplayModal;
}

const initialState: ISettingsState = {
  displayedModal: { option: DisplayedModalOptions.none, entityProfileId: null },
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(fetchTermRelations(termId))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.

export const settingsSlice = createSlice({
  name: 'settings',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    setDisplayedModal: (state, { payload }: PayloadAction<IDisplayModal>) => {
      state.displayedModal = { ...state.displayedModal, ...payload };
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.

});
export const { setDisplayedModal } = settingsSlice.actions;
// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.authentication.value)`
export const selectSettings = (state: RootState) => state.settings;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.

export default settingsSlice.reducer;
